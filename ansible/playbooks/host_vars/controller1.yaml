# OpenStack Controller
#ethernet vars
allNetworkInterfaces: "{{ ansible_facts | dict2items | selectattr('value.ipv4', 'defined') | map(attribute='value') | list }}"
allNetworkInterfaces_var2: "{{ ansible_facts.interfaces | map('extract', ansible_facts ) | list }}"
interfaceWithKnownIp: "{{ ansible_facts | dict2items | selectattr('value.ipv4', 'defined') | selectattr('value.ipv4.address', 'equalto', myKnowIpV4) | first }}"
interfaceWithKnownIp_fromVar: "{{ allNetworkInterfaces | selectattr('ipv4.address', 'equalto', myKnowIpV4) | first }}"
interfacesWithPartialKnowMac: "{{ allNetworkInterfaces | selectattr('macaddress', 'match', knownMacPrefix~'.*') | list }}"
interfacesWitKnowType: "{{ allNetworkInterfaces | selectattr('type', 'equalto', 'ether') | sort(attribute='device') | list }}"

#ethernet_interfaces: "{{ ansible_facts | dict2items | map(attribute='value')
#| selectattr('type', 'defined')  
#| selectattr('type', 'equalto', 'ether')  
#| selectattr('module', 'defined')  
#| rejectattr('module', 'match', 'iwl.*') 
#| rejectattr('module', 'match', 'cdc.*') 
#| map(attribute='device')
#| list }}" 
# Convert KV dict ansible_facts to list of objects with K,V attributes, put all V in a list.
# Filter the list for items with type defined. Without this type is evaluated even if not defined.
# Filter the list for items with type = ether.
# Filter out item with module = iwl*. (wifi iface).
# Filter out item with module = cdc*. (wwan iface).
# Create a list from attribute device.
# Generate the final list.
ethernet_interfaces: [enp0s25]
external_interface: enp0s26u1u2

#bond vars
nmcli_bond:
  - conn_name: '{{ os_bond.bond_name }}'
    ip4: '192.168.0.113/24'
    gw4: '192.168.0.1'
    dns4:
      - 8.8.8.8
    mode: '{{ os_bond.mode }}'
#  - conn_name: bond1
#    ip4: '{{ external_ip }}'
#    gw4: ''
#    mode: balance-alb
nmcli_bond_slave: '{{ ethernet_interfaces }}'
#  - conn_name: ethX
#    ifname: ethX
#    master: bond0

# bridge vars
nmcli_bridge:
  - conn_name: '{{ os_management.br_name }}'
    type: bridge
    ip4: '172.29.236.2/22'
  - conn_name: '{{ os_overlay.br_name }}'
    type: bridge
    ip4: '172.29.240.2/22'
  - conn_name: '{{ os_storage.br_name }}'
    type: bridge
    ip4: '172.29.244.2/22'
  - conn_name: '{{ os_external.br_name }}'
    type: bridge
    ip4: '192.168.0.115/24'
 
